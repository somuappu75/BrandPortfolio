{"ast":null,"code":"// Inspiration: https://github.com/facebook/react/issues/3386\n\nfunction replace(string, regexpOrSubstr, newValueOrFn, globalOffset) {\n  if (typeof string !== 'string') throw new Error('First param must be a string');\n  if (typeof regexpOrSubstr !== 'string' && !(regexpOrSubstr instanceof RegExp)) throw new Error('Second param must be a string pattern or a regular expression');\n  var fn = typeof regexpOrSubstr === 'string' ? replaceUsingString : replaceUsingRegexp;\n  return fn(string, regexpOrSubstr, newValueOrFn, globalOffset);\n}\nfunction replaceUsingString(string, patternString, newValueOrFn, globalOffset) {\n  var index = string.indexOf(patternString);\n  if (index >= 0) {\n    var arr = [];\n    var endIndex = index + patternString.length;\n    if (index > 0) {\n      arr.push(string.substring(0, index));\n    }\n    arr.push(typeof newValueOrFn === 'function' ? newValueOrFn(string.substring(index, endIndex), index + globalOffset, string) : newValueOrFn);\n    if (endIndex < string.length) {\n      arr.push(string.substring(endIndex));\n    }\n    return arr;\n  } else {\n    return [string];\n  }\n}\nfunction replaceUsingRegexp(string, regexp, newValueOrFn, globalOffset) {\n  var output = [];\n  var replacerIsFn = typeof newValueOrFn === 'function';\n  var storedLastIndex = regexp.lastIndex;\n  regexp.lastIndex = 0;\n  var result;\n  var lastIndex = 0;\n  while (result = regexp.exec(string)) {\n    var index = result.index;\n    if (result[0] === '') {\n      // When the regexp is an empty string\n      // we still want to advance our cursor to the next item.\n      // This is the behavior of String.replace.\n      regexp.lastIndex++;\n    }\n    if (index !== lastIndex) {\n      output.push(string.substring(lastIndex, index));\n    }\n    var match = result[0];\n    lastIndex = index + match.length;\n    var out = replacerIsFn ? newValueOrFn.apply(this, result.concat(index + globalOffset, result.input)) : newValueOrFn;\n    output.push(out);\n    if (!regexp.global) {\n      break;\n    }\n  }\n  if (lastIndex < string.length) {\n    output.push(string.substring(lastIndex));\n  }\n  regexp.lastIndex = storedLastIndex;\n  return output;\n}\nmodule.exports = function stringReplaceToArray(stringOrArray, regexpOrSubstr, newSubStrOrFn) {\n  if (typeof stringOrArray === 'string') {\n    return replace(stringOrArray, regexpOrSubstr, newSubStrOrFn, 0);\n  } else if (!Array.isArray(stringOrArray) || !stringOrArray[0]) {\n    throw new TypeError('First argument must be an array or non-empty string');\n  } else {\n    var len = stringOrArray.length;\n    var output = [];\n    var globalOffset = 0;\n    for (var i = 0; i < len; ++i) {\n      var arrayItem = stringOrArray[i];\n      if (typeof arrayItem === 'string') {\n        output.push.apply(output, replace(arrayItem, regexpOrSubstr, newSubStrOrFn, globalOffset));\n        globalOffset += arrayItem.length;\n      } else {\n        output.push(arrayItem);\n      }\n    }\n    return output;\n  }\n};","map":null,"metadata":{},"sourceType":"script"}